[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "trust-mcnet-redesigned"
version = "2.0.0"
description = "Enhanced TRUST-MCNet federated learning framework with SOLID principles"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "TRUST-MCNet Team", email = "contact@trust-mcnet.org"}
]
keywords = ["federated learning", "machine learning", "distributed computing", "trust evaluation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]
requires-python = ">=3.8"
dependencies = [
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    "ray[default]>=2.8.0",
    "flwr>=1.6.0",
    "torch>=1.9.0",
    "torchvision>=0.10.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pyyaml>=5.4.0",
    "tensorboard>=2.10.0",
    "psutil>=5.8.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "tqdm>=4.62.0",
    "tenacity>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "isort>=5.10.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
    "jupyter>=1.0.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
experiment-tracking = [
    "mlflow>=1.20.0",
    "wandb>=0.12.0",
]
validation = [
    "pydantic>=1.8.0",
]

[project.urls]
Homepage = "https://github.com/trust-mcnet/trust-mcnet-redesigned"
Documentation = "https://trust-mcnet-redesigned.readthedocs.io/"
Repository = "https://github.com/trust-mcnet/trust-mcnet-redesigned.git"
"Bug Tracker" = "https://github.com/trust-mcnet/trust-mcnet-redesigned/issues"

[project.scripts]
trust-mcnet = "enhanced_simulation:main"
trust-mcnet-test = "tests:run_all_tests"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "*.tests", "*.tests.*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["utils", "models", "clients", "trust_module", "config"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "dist", "build", "*.egg-info"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ray.*",
    "flwr.*",
    "torch.*",
    "torchvision.*",
    "hydra.*",
    "omegaconf.*",
    "pandas.*",
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "tensorboard.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
